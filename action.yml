name: 'Build Python Source and Wheel Distributions'
description: 'Build source distribution for any Python package and wheels for Python packages without extensions.'
branding:
  icon: package
  color: blue
inputs:
  test_groups:
    description: Comma-separated PEP 735 dependency groups that should be installed for testing
    required: false
    default: ''
    type: string
  test_extras:
    description: Any extras_requires modifier that should be used to install the package for testing
    required: false
    default: ''
    type: string
  test_command:
    description: The command to run to test the package (will be run in a temporary directory)
    required: false
    default: ''
    type: string
  pure_python_wheel:
    description: Whether to build a pure Python wheel in addition to the source distribution
    required: false
    default: false
    type: string
  python-version:
    description: The Python version to use for building and testing
    required: false
    default: '3.x'
    type: string
runs:
  using: "composite"
  steps:

  - uses: actions/checkout@v4
    with:
      fetch-depth: 0

  - uses: actions/setup-python@v5
    with:
      python-version: ${{ inputs.python-version }}

  - name: Install python-build and twine
    shell: bash
    run: python -m pip install pip build twine --upgrade

  - name: Build source distribution
    shell: bash
    run: python -m build --sdist .

  - name: Create and activate a virtual environment
    shell: bash
    run: |
      python -m venv test-sdist
      source test-sdist/bin/activate
      which python

  - name: Parse dependency groups
    shell: bash
    run: |
      echo "group_flags=$( python -c "print(' '.join(f'--group {g.strip()}' for g in '${{ inputs.test_groups }}'.split(',')))" ) " >> "$GITHUB_ENV"

  - name: Test source distribution
    shell: bash
    run: |
      python -m pip install --force-reinstall `find dist -name "*.tar.gz"`[${{ inputs.test_extras }}] $group_flags
      cd ${{ runner.temp }}
      ${{ inputs.test_command }}
    if: ${{ inputs.test_command != '' && inputs.test_extras != '' }}

  - name: Test source distribution
    shell: bash
    run: |
      python -m pip install --force-reinstall `find dist -name "*.tar.gz"` $group_flags
      cd ${{ runner.temp }}
      ${{ inputs.test_command }}
    if: ${{ inputs.test_command != '' && inputs.test_extras == '' }}

  - name: Build pure Python wheel distribution
    shell: bash
    run: python -m build --wheel .
    if: ${{ inputs.pure_python_wheel == 'true' }}

  - name: Verify that one pure Python wheel was built
    shell: bash
    run: |
      ls -1 dist/*
      if [ $(ls -1 dist/*.whl 2>/dev/null | wc -l) != 1 ] ||
         [ $(ls -1 dist/*none-any.whl 2>/dev/null | wc -l) != 1 ]; then
        echo "::error ::Build failed because package is not pure Python."
        exit 1
      fi
    if: ${{ inputs.pure_python_wheel == 'true' }}

  - name: Test pure Python wheel distribution
    shell: bash
    run: |
      python -m venv test-wheel
      source test-wheel/bin/activate
      which python
      python -m pip install --force-reinstall `find dist -name "*.whl"`[${{ inputs.test_extras }}]
      cd ${{ runner.temp }}
      ${{ inputs.test_command }}
    if: ${{ inputs.pure_python_wheel == 'true' && inputs.test_command != '' && inputs.test_extras != '' }}

  - name: Test pure Python wheel distribution
    shell: bash
    run: |
      python -m venv test-wheel
      source test-wheel/bin/activate
      which python
      python -m pip install --force-reinstall `find dist -name "*.whl"`
      cd ${{ runner.temp }}
      ${{ inputs.test_command }}
    if: ${{ inputs.pure_python_wheel == 'true' && inputs.test_command != '' && inputs.test_extras == '' }}
